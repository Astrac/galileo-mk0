package astrac.minerva

import org.scalatest.{FlatSpec, Matchers}
import rk4._

class Rk4Spec extends FlatSpec with Matchers {
  type DoubleFn = (Double, Double) => Double

  val minDt = 0.001
  val maxDt = 0.25

  "The RK4 integration" should "integrate `y = x` in [0, 1] giving 0.5" in {
    val fn: DoubleFn = (_, x) => x

    val res: Double = integrator(fn).integrate(0.0 to 1.0 by minDt, minDt, maxDt).last
    res should equal(0.5 +- 0.05)
  }

  it should "integrate `y = x + 2` in [0, 1] giving 2.5" in {
    val fn: DoubleFn = (_, x) => x + 2

    val res: Double = integrator(fn).integrate(0.0 to 1.0 by minDt, minDt, maxDt).last
    res should equal(2.5 +- 0.05)
  }

  it should "integrate `y = x` in [1, 2] giving 1.5" in {
    val fn: DoubleFn = (_, x) => x

    val res: Double = integrator(fn).integrate(1.0 to 2.0 by minDt, minDt, maxDt).last
    res should equal(1.5 +- 0.05)
  }

  it should "integrate `y = x + 2` in [1, 3] giving 8" in {
    val fn: DoubleFn = (_, x) => x + 2

    val res: Double = integrator(fn).integrate(1.0 to 3.0 by minDt, minDt, maxDt).last
    res should equal(8.0 +- 0.05)
  }

  it should "integrate `y = sin x` in [-pi, pi] giving 0" in {
    val fn: DoubleFn = (_, x) => math.sin(x)

    val res: Double = integrator(fn).integrate((- math.Pi) to math.Pi by minDt, minDt, maxDt).last
    res should equal(0.0 +- 0.05)
  }
}
